{"version":3,"sources":["components.js/Post.js","components.js/PaginationBar.js","components.js/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Post","title","id","loading","PaginationBar","i","totalPage","postPerPage","currentNumber","paginationButtons","numberOfPosts","Math","ceil","push","style","display","border","justifyContent","width","map","num","key","backgroundColor","margin","href","onClick","Pagination","useState","posts","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","async","axios","get","response","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","post","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAEaA,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAC5B,OAD8C,EAAdC,QACZ,2CAElB,4BACE,oCACQD,EADR,aACsBD,KCLfG,EAAgB,SAAC,GAA+C,IAEvEC,EAF0BC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAClDC,EAAoB,GAEpBC,EAAgBC,KAAKC,KAAKN,EAAYC,GAC1C,IAAKF,EAAI,EAAGA,GAAKK,EAAeL,IAC9BI,EAAkBI,KAAKR,GAEzB,OACE,yBACES,MAAO,CACLC,QAAS,OACTC,OAAQ,iBACRC,eAAgB,eAChBC,MAAO,QAGRT,EAAkBU,KAAI,SAAAC,GAAG,OACxB,uBACEC,IAAKD,EACLN,MAAO,CACLQ,gBAAiB,OACjBN,OAAQ,iBACRO,OAAQ,SACRR,QAAS,gBAEXS,KAAM,KACNC,QAAS,kBAAMjB,EAAcY,KAE5BA,QCzBEM,EAAa,WAAO,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,OAEAF,oBAAS,GAFT,mBAEvBxB,EAFuB,KAEd2B,EAFc,OAGQH,mBAAS,GAHjB,mBAGvBI,EAHuB,KAGVC,EAHU,OAIRL,mBAAS,GAAxBpB,EAJuB,oBAK9B0B,qBAAU,YACW,mBAAAC,EAAAC,OAAA,uDACjBL,GAAW,GADM,WAAAI,EAAA,MAEME,IAAMC,IAC3B,+CAHe,OAEXC,EAFW,OAKjBT,EAASS,EAASC,MAClBT,GAAW,GANM,qCAQnBU,KACC,IAGH,IAAMC,EAAkBV,EAAcxB,EAChCmC,EAAmBD,EAAkBlC,EACrCoC,EAAef,EAAMgB,MAAMF,EAAkBD,GAMnD,OACE,6BACE,+CACA,4BACGE,EAAaxB,KAAI,SAAA0B,GAAI,OACpB,kBAAC,EAAD,CACExB,IAAKwB,EAAK3C,GACVD,MAAO4C,EAAK5C,MACZC,GAAI2C,EAAK3C,GACTC,QAASA,QAIf,kBAAC,EAAD,CACEG,UAAWsB,EAAMkB,OACjBvC,YAAaA,EACbC,cApBuB,SAAAY,GAC3BY,EAAeZ,QChBJ2B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9458b199.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Post = ({ title, id, loading }) => {\r\n  if (loading) return <h2>loading....</h2>;\r\n  return (\r\n    <li>\r\n      <h4>\r\n        Id : {id} , Title: {title}\r\n      </h4>\r\n    </li>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const PaginationBar = ({ totalPage, postPerPage, currentNumber }) => {\r\n  let paginationButtons = [];\r\n  let i;\r\n  let numberOfPosts = Math.ceil(totalPage / postPerPage);\r\n  for (i = 1; i <= numberOfPosts; i++) {\r\n    paginationButtons.push(i);\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        border: '2px solid #333',\r\n        justifyContent: 'space-around',\r\n        width: '50%'\r\n      }}\r\n    >\r\n      {paginationButtons.map(num => (\r\n        <a\r\n          key={num}\r\n          style={{\r\n            backgroundColor: '#999',\r\n            border: '1px solid #aaa',\r\n            margin: '0.5rem',\r\n            display: 'inline-block'\r\n          }}\r\n          href={'!#'}\r\n          onClick={() => currentNumber(num)}\r\n        >\r\n          {num}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Post } from './Post';\r\nimport { PaginationBar } from './PaginationBar';\r\n\r\nexport const Pagination = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postPerPage] = useState(5);\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      const response = await axios.get(\r\n        'https://jsonplaceholder.typicode.com/posts'\r\n      );\r\n      setPosts(response.data);\r\n      setLoading(false);\r\n    };\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // pagination trick\r\n  const indexOfLastPost = currentPage * postPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  const setCurrentPageNumber = num => {\r\n    setCurrentPage(num);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Blog Pagination</h2>\r\n      <ul>\r\n        {currentPosts.map(post => (\r\n          <Post\r\n            key={post.id}\r\n            title={post.title}\r\n            id={post.id}\r\n            loading={loading}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <PaginationBar\r\n        totalPage={posts.length}\r\n        postPerPage={postPerPage}\r\n        currentNumber={setCurrentPageNumber}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { Pagination } from './components.js/Pagination';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pagination />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}